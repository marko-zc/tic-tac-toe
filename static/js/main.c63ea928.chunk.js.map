{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","winLine","this","squares","includes","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","winner","setState","concat","step","status","current","winInfo","moves","map","move","desc","jumpTo","isDraw","handleClick","line","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c63ea928.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'\r\n\r\n  function Square(props) {\r\n    const className = 'square' + (props.highlight ? ' highlight' : '');\r\n    return (\r\n      <button\r\n        className={className}\r\n        onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n      const winLine = this.props.winLine;\r\n      return (\r\n        <Square\r\n          key={i}\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n          highlight={winLine && winLine.includes(i)}\r\n        />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        history: [{\r\n          squares: Array(9).fill(null),\r\n        }],\r\n        stepNumber: 0,\r\n        xIsNext: true,\r\n      };\r\n    }\r\n\r\n    handleClick(i) {\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      if (calculateWinner(squares).winner || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n        history: history.concat([{\r\n          squares: squares,\r\n        }]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext,\r\n      });\r\n    }\r\n\r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0,\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      \r\n      const winInfo = calculateWinner(current.squares);\r\n      const winner = winInfo.winner;\r\n\r\n      let moves = history.map((step, move) => {\r\n        const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n          </li>\r\n        );\r\n      });\r\n\r\n      let status;\r\n      if (winner) {\r\n        status = \"Winner: \" + winner;\r\n      } else if (winInfo.isDraw) {\r\n        status = \"Draw\";\r\n      } else {\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      }\r\n\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n              squares={current.squares}\r\n              onClick={(i) => this.handleClick(i)}\r\n              winLine={winInfo.line}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ul>{moves}</ul>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return {\r\n          winner: squares[a],\r\n          line: lines[i],\r\n          isDraw: false,\r\n        };\r\n      }\r\n    }\r\n\r\n    let isDraw = true;\r\n    for (let i=0; i < squares.length; i++) {\r\n      if (squares[i] === null) {\r\n        isDraw = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return {\r\n      winner: null,\r\n      line: null,\r\n      isDraw: isDraw,\r\n    };\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}